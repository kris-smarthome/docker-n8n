services:
  x-shared: &shared
    image: docker.n8n.io/n8nio/n8n
    container_name: "x-shared"
    restart: unless-stopped
    security_opt:       
      - no-new-privileges:true 
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - NODE_ENV=production
      - N8N_RUNNERS_ENABLED=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
    links:
      - postgres
      - redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n-app:/files
    networks:
      - n8n-app
  postgres:
    image: postgres:16.6
    container_name: "postgres_n8n"
    restart: unless-stopped
    security_opt:       
      - no-new-privileges:true 
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - postgres_n8n_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-app
  
  redis:
    image: redis:6-alpine
    container_name: "redis_n8n"
    restart: unless-stopped
    security_opt:       
      - no-new-privileges:true 
    volumes:
      - redis_n8n_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-app

  n8n:
    <<: *shared
    container_name: "n8n"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    #ports:
    #  - 5678:5678
    networks:
      - n8n-app
      - traefik

  n8n-worker:
    <<: *shared
    container_name: "n8n_worker"
    command: worker
    depends_on:
      - n8n
    networks:
      - n8n-app


volumes:
  n8n_storage:
  postgres_n8n_storage:
  redis_n8n_storage:

networks:
  traefik:
    name: "traefik"
    external: true
  n8n-app:
    name: "n8n-app"

